/*
格式：  //类似结构体，使用也雷同  . 或->  操作
union 共用体名字{
	类型名  共用体成员名;
	......
};

共同体的作用是对于不同的数据类型使用共同的存储区域
共同体在运行过程中只有一个成员处于活动状态，
而结构体所有成员均处于活动状态。
*/
#include<iostream>
using namespace std;
union data {
	char c;
	int i;
	double d,e;

};

void test1() {
	union data u = { 'a' };  //在共用体变量说明时可以赋值初始化，但只可以初始化其中的一个成员类型
							//其余的通过 .或->操作赋值
	cout << u.c << endl;
	u.i = 25;
	u.d = 2.89;
	u.e = 3.25;
	cout << u.e << " " << u.d << " " << u.i << endl;    //3.25 3.25 0

	/*
	问题：
		u.i数据错误
	原因：
		同一时间只能存放一种共同体成员类型，而不能同时存放多种。
		能访问的是共同体变量中最后一次被赋值的成员，在对.新的成员赋值后，原有的成员将失去作用。
	*/
}

/*
    	union与struct不同，union将不同的数据类型变量组合到一起，使用共同体的优点是可以共享数据空间
    最大的成员所占用的空间就是共同体的空间，节省了空间的开销。
*/

int main() {

	test1();
	
	system("pause");
	return 0;
}